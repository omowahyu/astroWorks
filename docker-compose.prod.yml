# Production Docker Compose configuration
# Use this file for production deployments

version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: astroworks_postgres_prod
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE:-astroworks}
      POSTGRES_USER: ${DB_USERNAME:-astroworks}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-astroworks} -d ${DB_DATABASE:-astroworks}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - astroworks_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  app:
    image: ${IMAGE_TAG:-ghcr.io/yourusername/astrokabinet:latest}
    container_name: astroworks_app_prod
    restart: always
    ports:
      - "8000:8000"
    environment:
      APP_NAME: ${APP_NAME:-AstroWorks}
      APP_ENV: production
      APP_DEBUG: false
      APP_URL: ${APP_URL:-https://yourdomain.com}
      APP_KEY: ${APP_KEY}
      
      # Database
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-astroworks}
      DB_USERNAME: ${DB_USERNAME:-astroworks}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Cache and Sessions
      SESSION_DRIVER: database
      CACHE_STORE: database
      QUEUE_CONNECTION: database
      
      # Mail
      MAIL_MAILER: ${MAIL_MAILER:-smtp}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_ENCRYPTION: ${MAIL_ENCRYPTION:-tls}
      MAIL_FROM_ADDRESS: ${MAIL_FROM_ADDRESS}
      MAIL_FROM_NAME: ${MAIL_FROM_NAME:-AstroWorks}
      
      # Admin credentials
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      
      # Security
      SESSION_SECURE_COOKIE: true
      SESSION_HTTP_ONLY: true
      SESSION_SAME_SITE: strict
      
      # Logging
      LOG_CHANNEL: stack
      LOG_LEVEL: warning
      
      # Performance
      OPCACHE_ENABLE: 1
      OPCACHE_MEMORY_CONSUMPTION: 256
      OPCACHE_MAX_ACCELERATED_FILES: 20000
      OPCACHE_VALIDATE_TIMESTAMPS: 0
      
    volumes:
      # Only mount necessary directories
      - app_storage:/app/storage
      - app_cache:/app/bootstrap/cache
      - ./public/storage:/app/public/storage
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - astroworks_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: astroworks_nginx_prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - astroworks_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - nginx

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: astroworks_redis_prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    networks:
      - astroworks_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    profiles:
      - redis

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: astroworks_backup
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/backup.sh"]
    depends_on:
      - postgres
    networks:
      - astroworks_network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_storage:
    driver: local
  app_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  astroworks_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16