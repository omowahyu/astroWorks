name: Deploy Astrokabinet to Production Server

on:
  push:
    branches:
      - main

jobs:
  quality:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up job
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2

      - name: Install Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Pint
        run: ./vendor/bin/pint --test

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Node Dependencies
        run: npm ci

      - name: Format Frontend
        run: npm run format

      - name: Lint Frontend
        run: npm run lint

  deploy:
    needs: quality
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2

      - name: Setup Composer
        run: composer install --no-dev --optimize-autoloader --no-interaction --no-progress --prefer-dist

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Setup Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Deploy files to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/tmp/astrokabinet-deploy"
          rm: true

      - name: Run remote commands
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create target directory if it doesn't exist
            sudo mkdir -p ${{ secrets.REMOTE_TARGET }}

            # Copy files from temp location to target directory
            sudo rsync -av --delete /tmp/astrokabinet-deploy/ ${{ secrets.REMOTE_TARGET }}/

            # Set proper ownership
            sudo chown -R ${{ secrets.REMOTE_USER }}:www-data ${{ secrets.REMOTE_TARGET }}

            # Navigate to the application directory
            cd ${{ secrets.REMOTE_TARGET }}

            # Verify we're in the right directory
            pwd
            ls -la

            # Create .env file from secrets
            echo "${{ secrets.ENV }}" > .env

            # Verify artisan file exists
            if [ ! -f "artisan" ]; then
              echo "Error: artisan file not found in $(pwd)"
              echo "Directory contents:"
              ls -la
              exit 1
            fi

            # Create necessary directories if they don't exist
            mkdir -p storage/logs
            mkdir -p storage/framework/cache
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p bootstrap/cache
            mkdir -p public/uploads

            # Generate app key if not set
            php artisan key:generate --force

            # Clear all caches first
            php artisan optimize:clear

            # Run database migrations
            php artisan migrate --force

            # Cache configuration and routes
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            # Link storage for public access
            php artisan storage:link

            # Final optimization
            php artisan optimize

            # Set proper permissions
            sudo chown -R www-data:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            # Set permissions for uploads directory if it exists
            if [ -d "public/uploads" ]; then
              sudo chmod -R 755 public/uploads
            fi

            # Restart PHP-FPM to ensure changes take effect
            sudo systemctl reload php8.2-fpm


