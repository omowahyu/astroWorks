name: List Available Backups

on:
  workflow_dispatch:

jobs:
  list-backups:
    runs-on: ubuntu-latest
    
    steps:
      - name: List available backups
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.REMOTE_HOST }}
          SERVER_USER: ${{ secrets.REMOTE_USER }}
          SERVER_PORT: ${{ secrets.REMOTE_PORT }}
        run: |
          # Setup SSH
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # List backups on server
          ssh -i private_key -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'EOF'
            BACKUP_PATH="/var/www/backups"
            
            echo "üìã Available backups in $BACKUP_PATH:"
            echo "================================================"
            
            if [ -d "$BACKUP_PATH" ] && [ "$(ls -A $BACKUP_PATH/backup_*.tar.gz 2>/dev/null)" ]; then
              echo "üì¶ Backup files:"
              ls -lah $BACKUP_PATH/backup_*.tar.gz | while read -r line; do
                # Extract filename and date
                filename=$(echo "$line" | awk '{print $9}')
                size=$(echo "$line" | awk '{print $5}')
                date=$(echo "$line" | awk '{print $6, $7, $8}')
                
                # Extract backup timestamp from filename
                backup_id=$(basename "$filename" .tar.gz | sed 's/backup_//')
                
                echo "  üóÇÔ∏è  $backup_id"
                echo "      üìÅ File: $(basename $filename)"
                echo "      üìä Size: $size"
                echo "      üìÖ Date: $date"
                echo ""
              done
              
              echo "================================================"
              echo "üìù To rollback to a specific backup:"
              echo "1. Go to Actions tab"
              echo "2. Select 'Manual Rollback' workflow"
              echo "3. Click 'Run workflow'"
              echo "4. Enter backup date (YYYYMMDD_HHMMSS) from above list"
              echo "5. Type 'ROLLBACK' to confirm"
              echo ""
              echo "üí° Leave backup date empty to use the latest backup"
              
            else
              echo "‚ùå No backup files found in $BACKUP_PATH"
              echo ""
              echo "This could mean:"
              echo "- No deployments have been made yet"
              echo "- Backup directory doesn't exist"
              echo "- Backup files were manually removed"
            fi
            
            echo ""
            echo "üîç Current deployment info:"
            DEPLOY_PATH="${{ secrets.REMOTE_TARGET }}"
            if [ -d "$DEPLOY_PATH" ]; then
              echo "üìÅ Deploy path: $DEPLOY_PATH"
              echo "üìä Current size: $(du -sh $DEPLOY_PATH 2>/dev/null | cut -f1)"
              echo "üìÖ Last modified: $(stat -c %y $DEPLOY_PATH 2>/dev/null | cut -d. -f1)"
              
              # Check if it's a git repository
              if [ -d "$DEPLOY_PATH/.git" ]; then
                cd $DEPLOY_PATH
                echo "üåø Git branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
                echo "üìù Last commit: $(git log -1 --oneline 2>/dev/null || echo 'unknown')"
              fi
            else
              echo "‚ùå Deploy path not found: $DEPLOY_PATH"
            fi
          EOF
          
          # Cleanup
          rm -f private_key

      - name: System status check
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.REMOTE_HOST }}
          SERVER_USER: ${{ secrets.REMOTE_USER }}
          SERVER_PORT: ${{ secrets.REMOTE_PORT }}
        run: |
          echo "üîç Checking system status..."
          
          # Setup SSH
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # Check system status
          ssh -i private_key -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'EOF'
            echo ""
            echo "üñ•Ô∏è  System Status:"
            echo "================================================"
            
            # Check disk space
            echo "üíæ Disk usage:"
            df -h / | tail -1 | awk '{print "    Root: " $3 " used / " $2 " total (" $5 " used)"}'
            
            # Check backup directory size
            BACKUP_PATH="/var/www/backups"
            if [ -d "$BACKUP_PATH" ]; then
              backup_size=$(du -sh $BACKUP_PATH 2>/dev/null | cut -f1)
              backup_count=$(ls -1 $BACKUP_PATH/backup_*.tar.gz 2>/dev/null | wc -l)
              echo "    Backups: $backup_size total ($backup_count files)"
            fi
            
            # Check services
            echo ""
            echo "üîß Service status:"
            systemctl is-active nginx >/dev/null 2>&1 && echo "    ‚úÖ Nginx: Running" || echo "    ‚ùå Nginx: Not running"
            systemctl is-active php8.3-fpm >/dev/null 2>&1 && echo "    ‚úÖ PHP 8.3-FPM: Running" || \
            systemctl is-active php8.2-fpm >/dev/null 2>&1 && echo "    ‚úÖ PHP 8.2-FPM: Running" || \
            echo "    ‚ùå PHP-FPM: Not running"
            systemctl is-active mysql >/dev/null 2>&1 && echo "    ‚úÖ MySQL: Running" || echo "    ‚ùå MySQL: Not running"
            
            echo ""
            echo "üåê Website status:"
          EOF
          
          # Check website from outside
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://astrokabinet.id || echo "000")
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "    ‚úÖ Website: Responding (HTTP $HTTP_STATUS)"
          else
            echo "    ‚ùå Website: Not responding (HTTP $HTTP_STATUS)"
          fi
          
          # Cleanup
          rm -f private_key
