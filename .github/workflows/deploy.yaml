name: Deploy Laravel 12 with Inertia and React

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up PHP environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3' # Laravel 12 requires PHP 8.2+
          extensions: dom, curl, libxml, mbstring, zip, pdo, pdo_mysql
          coverage: none

      # Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a stable Node.js version
          cache: 'npm'

      # Install Composer dependencies
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --optimize-autoloader

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Build frontend assets with Vite
      - name: Build assets
        run: npm run build

      # Run tests before deployment
      - name: Run tests
        run: php artisan test --parallel

      # Deploy to server via SSH
      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.REMOTE_HOST }}
          SERVER_USER: ${{ secrets.REMOTE_USER }}
          SERVER_PORT: ${{ secrets.REMOTE_PORT }}
          DEPLOY_PATH: ${{ secrets.REMOTE_TARGET }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Create backup on server first
          ssh -i private_key -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'BACKUP_EOF'
            if [ -d "${{ secrets.REMOTE_TARGET }}" ]; then
              echo "Creating backup..."
              sudo cp -r ${{ secrets.REMOTE_TARGET }} ${{ secrets.REMOTE_TARGET }}.backup.$(date +%Y%m%d_%H%M%S)
              echo "Backup created successfully"
            fi
          BACKUP_EOF

          # Create deployment archive to avoid rsync issues
          echo "📦 Creating deployment archive..."
          tar --exclude='.git' \
              --exclude='.github' \
              --exclude='node_modules' \
              --exclude='.env' \
              --exclude='.env.local' \
              --exclude='.env.example' \
              --exclude='storage/logs/*' \
              --exclude='storage/framework/cache/*' \
              --exclude='storage/framework/sessions/*' \
              --exclude='storage/framework/views/*' \
              --exclude='storage/app/public/*' \
              --exclude='bootstrap/cache/*' \
              --exclude='tests' \
              --exclude='*.log' \
              --exclude='.phpunit.result.cache' \
              --exclude='deploy.sh' \
              --exclude='README.md' \
              --exclude='private_key' \
              -czf deployment.tar.gz .

          # Transfer archive to server
          echo "📤 Transferring deployment archive..."
          scp -i private_key -o StrictHostKeyChecking=no -P $SERVER_PORT \
              deployment.tar.gz $SERVER_USER@$SERVER_HOST:/tmp/

          # Extract on server
          ssh -i private_key -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'EXTRACT_EOF'
            echo "📂 Extracting deployment archive..."
            cd ${{ secrets.REMOTE_TARGET }}
            sudo tar -xzf /tmp/deployment.tar.gz
            sudo rm /tmp/deployment.tar.gz
            echo "✅ Files extracted successfully"
          EXTRACT_EOF
          # Execute deployment commands on server
          ssh -i private_key -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_HOST << 'DEPLOY_EOF'
            set -e
            echo "🚀 Starting server-side deployment..."

            # Change to deployment directory
            cd ${{ secrets.REMOTE_TARGET }}
            echo "📁 Current directory: $(pwd)"

            # Set proper permissions
            echo "🔐 Setting permissions..."
            sudo chown -R www-data:www-data ${{ secrets.REMOTE_TARGET }}
            sudo chmod -R 755 ${{ secrets.REMOTE_TARGET }}
            sudo chmod -R 775 ${{ secrets.REMOTE_TARGET }}/storage
            sudo chmod -R 775 ${{ secrets.REMOTE_TARGET }}/bootstrap/cache

            # Create necessary directories
            echo "📂 Creating necessary directories..."
            sudo -u www-data mkdir -p storage/logs
            sudo -u www-data mkdir -p storage/framework/cache
            sudo -u www-data mkdir -p storage/framework/sessions
            sudo -u www-data mkdir -p storage/framework/views
            sudo -u www-data mkdir -p storage/app/public
            sudo -u www-data mkdir -p bootstrap/cache

            # Copy production environment file
            echo "⚙️ Setting up environment..."
            if [ -f .env.production ]; then
              sudo cp .env.production .env
              echo "✅ Production environment file copied"
            else
              echo "⚠️ Warning: .env.production not found"
            fi

            # Generate application key if needed
            if [ ! -f .env ] || ! grep -q "APP_KEY=" .env || grep -q "APP_KEY=$" .env; then
              echo "🔑 Generating application key..."
              sudo -u www-data php artisan key:generate --force
            else
              echo "✅ Application key already exists"
            fi

            # Install/update composer dependencies
            echo "📦 Installing Composer dependencies..."
            sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction

            # Run database migrations
            echo "🗄️ Running database migrations..."
            sudo -u www-data php artisan migrate --force

            # Create storage link
            echo "🔗 Creating storage link..."
            sudo -u www-data php artisan storage:link || echo "Storage link already exists"

            # Seed admin user
            echo "👤 Creating admin user..."
            sudo -u www-data php artisan db:seed --class=AdminUserSeeder --force || echo "Admin user may already exist"

            # Clear and cache everything
            echo "🧹 Clearing caches..."
            sudo -u www-data php artisan cache:clear
            sudo -u www-data php artisan config:clear
            sudo -u www-data php artisan route:clear
            sudo -u www-data php artisan view:clear

            echo "⚡ Optimizing application..."
            sudo -u www-data php artisan config:cache
            sudo -u www-data php artisan route:cache
            sudo -u www-data php artisan view:cache

            # Restart services
            echo "🔄 Restarting services..."
            sudo systemctl reload nginx
            sudo systemctl restart php8.3-fpm || sudo systemctl restart php8.2-fpm || echo "PHP-FPM restart may have failed"

            echo "✅ Deployment completed successfully!"
          DEPLOY_EOF

      # Health check
      - name: Health check
        run: |
          echo "🏥 Running health check..."
          sleep 10  # Wait for services to restart
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://astrokabinet.id || echo "000")
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Health check passed (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Health check returned HTTP $HTTP_STATUS"
            echo "This might be normal if the site is still starting up"
          fi

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          rm -f private_key
          rm -f deployment.tar.gz
