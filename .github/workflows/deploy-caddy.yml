name: Deploy AstroKabinet (Safe Deployment with Rollback)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests & Build Validation

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql, gd, zip
        coverage: none

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install Node dependencies
      run: npm ci

    - name: Create .env file
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Build frontend assets
      run: npm run build

    - name: Run PHP tests
      run: |
        if [ -f vendor/bin/pest ]; then
          vendor/bin/pest
        else
          echo "No tests found, skipping..."
        fi

    - name: Validate Laravel configuration
      run: |
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Safe Deploy to Production

    steps:
    - name: Deploy with Rollback Safety
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /var/www/astrokabinet.id

          # Create deployment timestamp
          DEPLOY_TIME=$(date +%Y%m%d_%H%M%S)
          echo "üöÄ Starting deployment at $DEPLOY_TIME"

          # Create backup of current state
          echo "üíæ Creating backup of current deployment..."
          if [ -d "backup_current" ]; then
            rm -rf backup_old
            mv backup_current backup_old
          fi
          mkdir -p backup_current

          # Backup current containers if running
          if docker-compose -f docker-compose.caddy.yml ps | grep -q "Up"; then
            echo "üì¶ Backing up current running containers..."
            docker-compose -f docker-compose.caddy.yml ps > backup_current/containers_state.txt
            docker images | grep astrokabinet > backup_current/images_state.txt || true
          fi

          # Pull latest changes
          echo "üì• Pulling latest changes..."
          git stash push -m "Auto-stash before deployment $DEPLOY_TIME" || true
          if ! git pull origin main; then
            echo "‚ùå Git pull failed! Aborting deployment."
            exit 1
          fi

          # Build new image first (without stopping current)
          echo "üî® Building new Docker image..."
          if ! docker-compose -f docker-compose.caddy.yml build; then
            echo "‚ùå Docker build failed! Rolling back..."
            git reset --hard HEAD~1
            exit 1
          fi

          # Stop current containers
          echo "üõë Stopping current containers..."
          docker-compose -f docker-compose.caddy.yml down || true

          # Start new containers
          echo "üîÑ Starting new containers..."
          if ! docker-compose -f docker-compose.caddy.yml up -d; then
            echo "‚ùå Container startup failed! Attempting rollback..."

            # Rollback: restore previous git state
            git reset --hard HEAD~1

            # Try to rebuild and restart with previous code
            docker-compose -f docker-compose.caddy.yml build
            docker-compose -f docker-compose.caddy.yml up -d

            echo "üîÑ Rollback completed. Check logs for issues."
            exit 1
          fi

          # Wait for containers to be ready
          echo "‚è≥ Waiting for containers to be ready..."
          sleep 45

          # Health check before proceeding
          echo "üè• Performing health check..."
          HEALTH_CHECK_ATTEMPTS=0
          MAX_ATTEMPTS=10

          while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            if docker-compose -f docker-compose.caddy.yml exec -T app php artisan --version > /dev/null 2>&1; then
              echo "‚úÖ Application is responding"
              break
            fi

            HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
            echo "‚è≥ Health check attempt $HEALTH_CHECK_ATTEMPTS/$MAX_ATTEMPTS..."
            sleep 10
          done

          if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_ATTEMPTS ]; then
            echo "‚ùå Health check failed! Rolling back..."

            # Stop failed containers
            docker-compose -f docker-compose.caddy.yml down

            # Rollback git
            git reset --hard HEAD~1

            # Rebuild and restart
            docker-compose -f docker-compose.caddy.yml build
            docker-compose -f docker-compose.caddy.yml up -d

            echo "üîÑ Rollback completed due to health check failure."
            exit 1
          fi

          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          if ! docker-compose -f docker-compose.caddy.yml exec -T app php artisan migrate --force; then
            echo "‚ö†Ô∏è Migration failed, but continuing (might be safe)..."
          fi

          # Create storage link
          echo "üîó Creating storage link..."
          docker-compose -f docker-compose.caddy.yml exec -T app php artisan storage:link || true

          # Final health check
          echo "üè• Final health check..."
          sleep 15

          if docker-compose -f docker-compose.caddy.yml exec -T app php artisan --version > /dev/null 2>&1; then
            echo "‚úÖ Deployment successful!"

            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -f

            # Show final status
            docker-compose -f docker-compose.caddy.yml ps

            # Save successful deployment info
            echo "Deployment $DEPLOY_TIME successful" > backup_current/deployment_success.txt
          else
            echo "‚ùå Final health check failed! Manual intervention required."
            exit 1
          fi

    - name: External Health Check
      run: |
        echo "üåê Testing external access..."
        sleep 20

        # Try multiple times with different approaches
        for i in {1..5}; do
          echo "Attempt $i/5..."

          if curl -f -m 30 http://astrokabinet.id > /dev/null 2>&1; then
            echo "‚úÖ Website is accessible externally!"
            exit 0
          fi

          if curl -f -m 30 http://103.117.56.159 > /dev/null 2>&1; then
            echo "‚úÖ Server is responding on IP!"
            exit 0
          fi

          sleep 10
        done

        echo "‚ö†Ô∏è External access check failed, but deployment may still be successful"
        echo "Please check manually: http://astrokabinet.id"
