# Build stage for Pingora
FROM rust:1.75 as pingora-builder

# Install dependencies
RUN apt-get update && apt-get install -y \
    cmake \
    build-essential \
    pkg-config \
    libssl-dev

# Clone and build Pingora
WORKDIR /build
RUN git clone https://github.com/cloudflare/pingora.git
WORKDIR /build/pingora
RUN cargo build --release --bin pingora-proxy

# PHP-FPM stage
FROM php:8.2-fpm

# Install system dependencies and PHP extensions
RUN apt-get update && apt-get install -y \
    git \
    unzip \
    zip \
    curl \
    libpng-dev \
    libjpeg-dev \
    libfreetype6-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    nodejs \
    npm \
    supervisor \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy Pingora binary
COPY --from=pingora-builder /build/pingora/target/release/pingora-proxy /usr/local/bin/pingora-proxy

# Set working directory
WORKDIR /app

# Copy dependency files for caching
COPY database/ database/
COPY composer.json composer.lock ./
RUN composer install --no-dev --no-interaction --no-plugins --no-scripts --prefer-dist

# Copy application source
COPY . .

# Create .env from example for build
RUN cp .env.example .env

# Generate application key
RUN php artisan key:generate

# Build frontend assets
RUN npm install && npm run build

# Cache Laravel config and routes
RUN php artisan config:cache
RUN php artisan route:cache  
RUN php artisan view:cache

# Clean up build files
RUN rm -f .env .env.example docker-compose.yml Dockerfile

# Set proper permissions
RUN chown -R www-data:www-data /app \
    && chmod -R 755 /app \
    && chmod -R 775 /app/storage /app/bootstrap/cache

# Create Pingora configuration
RUN mkdir -p /etc/pingora
COPY pingora.conf /etc/pingora/pingora.conf

# Create supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose ports
EXPOSE 80 443 9000

# Start supervisor (manages both Pingora and PHP-FPM)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
